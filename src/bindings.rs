/* automatically generated by rust-bindgen */

pub const EverCrypt_Error_Success: u32 = 0;
pub const EverCrypt_Error_UnsupportedAlgorithm: u32 = 1;
pub const EverCrypt_Error_InvalidKey: u32 = 2;
pub const EverCrypt_Error_AuthenticationFailure: u32 = 3;
pub const EverCrypt_Error_InvalidIVLength: u32 = 4;
pub const EverCrypt_Error_DecodeError: u32 = 5;
pub const Spec_Hash_Definitions_SHA2_224: u32 = 0;
pub const Spec_Hash_Definitions_SHA2_256: u32 = 1;
pub const Spec_Hash_Definitions_SHA2_384: u32 = 2;
pub const Spec_Hash_Definitions_SHA2_512: u32 = 3;
pub const Spec_Hash_Definitions_SHA1: u32 = 4;
pub const Spec_Hash_Definitions_MD5: u32 = 5;
pub const Spec_Agile_Cipher_AES128: u32 = 0;
pub const Spec_Agile_Cipher_AES256: u32 = 1;
pub const Spec_Agile_Cipher_CHACHA20: u32 = 2;
pub const Spec_Cipher_Expansion_Hacl_CHACHA20: u32 = 0;
pub const Spec_Cipher_Expansion_Vale_AES128: u32 = 1;
pub const Spec_Cipher_Expansion_Vale_AES256: u32 = 2;
pub const Spec_Agile_AEAD_AES128_GCM: u32 = 0;
pub const Spec_Agile_AEAD_AES256_GCM: u32 = 1;
pub const Spec_Agile_AEAD_CHACHA20_POLY1305: u32 = 2;
pub const Spec_Agile_AEAD_AES128_CCM: u32 = 3;
pub const Spec_Agile_AEAD_AES256_CCM: u32 = 4;
pub const Spec_Agile_AEAD_AES128_CCM8: u32 = 5;
pub const Spec_Agile_AEAD_AES256_CCM8: u32 = 6;
pub const EverCrypt_Hash_MD5_s: u32 = 0;
pub const EverCrypt_Hash_SHA1_s: u32 = 1;
pub const EverCrypt_Hash_SHA2_224_s: u32 = 2;
pub const EverCrypt_Hash_SHA2_256_s: u32 = 3;
pub const EverCrypt_Hash_SHA2_384_s: u32 = 4;
pub const EverCrypt_Hash_SHA2_512_s: u32 = 5;
pub const EverCrypt_DRBG_SHA1_s: u32 = 0;
pub const EverCrypt_DRBG_SHA2_256_s: u32 = 1;
pub const EverCrypt_DRBG_SHA2_384_s: u32 = 2;
pub const EverCrypt_DRBG_SHA2_512_s: u32 = 3;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type C_String_t = *const ::std::os::raw::c_char;
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_shaext() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_aesni() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_pclmulqdq() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_avx2() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_avx() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_bmi2() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_adx() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_sse() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_movbe() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_rdrand() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_has_avx512() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_wants_vale() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_wants_hacl() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_wants_openssl() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_wants_bcrypt() -> bool;
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_recall();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_init();
}
pub type EverCrypt_AutoConfig2_disabler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_avx2();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_avx();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_bmi2();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_adx();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_shaext();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_aesni();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_pclmulqdq();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_sse();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_movbe();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_rdrand();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_avx512();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_vale();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_hacl();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_openssl();
}
extern "C" {
    pub fn EverCrypt_AutoConfig2_disable_bcrypt();
}
extern "C" {
    pub fn EverCrypt_Chacha20Poly1305_aead_encrypt(
        k: *mut u8,
        n: *mut u8,
        aadlen: u32,
        aad: *mut u8,
        mlen: u32,
        m: *mut u8,
        cipher: *mut u8,
        tag: *mut u8,
    );
}
extern "C" {
    pub fn EverCrypt_Chacha20Poly1305_aead_decrypt(
        k: *mut u8,
        n: *mut u8,
        aadlen: u32,
        aad: *mut u8,
        mlen: u32,
        m: *mut u8,
        cipher: *mut u8,
        tag: *mut u8,
    ) -> u32;
}
pub type EverCrypt_Error_error_code = u8;
pub type Spec_Hash_Definitions_hash_alg = u8;
pub type Spec_Agile_Cipher_cipher_alg = u8;
pub type Spec_Cipher_Expansion_impl = u8;
pub type Spec_Agile_AEAD_alg = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EverCrypt_AEAD_state_s_s {
    _unused: [u8; 0],
}
pub type EverCrypt_AEAD_state_s = EverCrypt_AEAD_state_s_s;
extern "C" {
    pub fn EverCrypt_AEAD_alg_of_state(s: *mut EverCrypt_AEAD_state_s) -> Spec_Agile_AEAD_alg;
}
extern "C" {
    pub fn EverCrypt_AEAD_create_in(
        a: Spec_Agile_AEAD_alg,
        dst: *mut *mut EverCrypt_AEAD_state_s,
        k: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_encrypt(
        s: *mut EverCrypt_AEAD_state_s,
        iv: *mut u8,
        iv_len: u32,
        ad: *mut u8,
        ad_len: u32,
        plain: *mut u8,
        plain_len: u32,
        cipher: *mut u8,
        tag: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_encrypt_expand_aes128_gcm(
        k: *mut u8,
        iv: *mut u8,
        iv_len: u32,
        ad: *mut u8,
        ad_len: u32,
        plain: *mut u8,
        plain_len: u32,
        cipher: *mut u8,
        tag: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_encrypt_expand_aes256_gcm(
        k: *mut u8,
        iv: *mut u8,
        iv_len: u32,
        ad: *mut u8,
        ad_len: u32,
        plain: *mut u8,
        plain_len: u32,
        cipher: *mut u8,
        tag: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_encrypt_expand_chacha20_poly1305(
        k: *mut u8,
        iv: *mut u8,
        iv_len: u32,
        ad: *mut u8,
        ad_len: u32,
        plain: *mut u8,
        plain_len: u32,
        cipher: *mut u8,
        tag: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_encrypt_expand(
        a: Spec_Agile_AEAD_alg,
        k: *mut u8,
        iv: *mut u8,
        iv_len: u32,
        ad: *mut u8,
        ad_len: u32,
        plain: *mut u8,
        plain_len: u32,
        cipher: *mut u8,
        tag: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_decrypt(
        s: *mut EverCrypt_AEAD_state_s,
        iv: *mut u8,
        iv_len: u32,
        ad: *mut u8,
        ad_len: u32,
        cipher: *mut u8,
        cipher_len: u32,
        tag: *mut u8,
        dst: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_decrypt_expand_aes128_gcm(
        k: *mut u8,
        iv: *mut u8,
        iv_len: u32,
        ad: *mut u8,
        ad_len: u32,
        cipher: *mut u8,
        cipher_len: u32,
        tag: *mut u8,
        dst: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_decrypt_expand_aes256_gcm(
        k: *mut u8,
        iv: *mut u8,
        iv_len: u32,
        ad: *mut u8,
        ad_len: u32,
        cipher: *mut u8,
        cipher_len: u32,
        tag: *mut u8,
        dst: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_decrypt_expand_chacha20_poly1305(
        k: *mut u8,
        iv: *mut u8,
        iv_len: u32,
        ad: *mut u8,
        ad_len: u32,
        cipher: *mut u8,
        cipher_len: u32,
        tag: *mut u8,
        dst: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_decrypt_expand(
        a: Spec_Agile_AEAD_alg,
        k: *mut u8,
        iv: *mut u8,
        iv_len: u32,
        ad: *mut u8,
        ad_len: u32,
        cipher: *mut u8,
        cipher_len: u32,
        tag: *mut u8,
        dst: *mut u8,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_AEAD_free(s: *mut EverCrypt_AEAD_state_s);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EverCrypt_CTR_state_s_s {
    _unused: [u8; 0],
}
pub type EverCrypt_CTR_state_s = EverCrypt_CTR_state_s_s;
pub type EverCrypt_CTR_uint8 = u8;
extern "C" {
    pub fn EverCrypt_CTR_xor8(a: u8, b: u8) -> u8;
}
pub type EverCrypt_CTR_e_alg = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn EverCrypt_CTR_alg_of_state(
        s: *mut EverCrypt_CTR_state_s,
    ) -> Spec_Agile_Cipher_cipher_alg;
}
extern "C" {
    pub fn EverCrypt_CTR_create_in(
        a: Spec_Agile_Cipher_cipher_alg,
        dst: *mut *mut EverCrypt_CTR_state_s,
        k: *mut u8,
        iv: *mut u8,
        iv_len: u32,
        c: u32,
    ) -> EverCrypt_Error_error_code;
}
extern "C" {
    pub fn EverCrypt_CTR_init(
        p: *mut EverCrypt_CTR_state_s,
        k: *mut u8,
        iv: *mut u8,
        iv_len: u32,
        c: u32,
    );
}
extern "C" {
    pub fn EverCrypt_CTR_update_block(p: *mut EverCrypt_CTR_state_s, dst: *mut u8, src: *mut u8);
}
extern "C" {
    pub fn EverCrypt_CTR_free(p: *mut EverCrypt_CTR_state_s);
}
extern "C" {
    pub fn EverCrypt_Curve25519_secret_to_public(pub_: *mut u8, priv_: *mut u8);
}
extern "C" {
    pub fn EverCrypt_Curve25519_scalarmult(shared: *mut u8, my_priv: *mut u8, their_pub: *mut u8);
}
extern "C" {
    pub fn EverCrypt_Curve25519_ecdh(shared: *mut u8, my_priv: *mut u8, their_pub: *mut u8)
        -> bool;
}
pub type EverCrypt_Hash_alg = Spec_Hash_Definitions_hash_alg;
extern "C" {
    pub fn EverCrypt_Hash_string_of_alg(uu___0_6: Spec_Hash_Definitions_hash_alg) -> C_String_t;
}
pub type EverCrypt_Hash_broken_alg = Spec_Hash_Definitions_hash_alg;
pub type EverCrypt_Hash_alg13 = Spec_Hash_Definitions_hash_alg;
pub type EverCrypt_Hash_e_alg = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn EverCrypt_Hash_alg_of_state(
        s: *mut EverCrypt_Hash_state_s,
    ) -> Spec_Hash_Definitions_hash_alg;
}
extern "C" {
    pub fn EverCrypt_Hash_create_in(
        a: Spec_Hash_Definitions_hash_alg,
    ) -> *mut EverCrypt_Hash_state_s;
}
extern "C" {
    pub fn EverCrypt_Hash_create(a: Spec_Hash_Definitions_hash_alg) -> *mut EverCrypt_Hash_state_s;
}
extern "C" {
    pub fn EverCrypt_Hash_init(s: *mut EverCrypt_Hash_state_s);
}
extern "C" {
    pub fn EverCrypt_Hash_update_multi_256(s: *mut u32, blocks: *mut u8, n: u32);
}
extern "C" {
    pub fn EverCrypt_Hash_update(s: *mut EverCrypt_Hash_state_s, block: *mut u8);
}
extern "C" {
    pub fn EverCrypt_Hash_update_multi(s: *mut EverCrypt_Hash_state_s, blocks: *mut u8, len: u32);
}
extern "C" {
    pub fn EverCrypt_Hash_update_last_256(
        s: *mut u32,
        prev_len: u64,
        input: *mut u8,
        input_len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_update_last(
        s: *mut EverCrypt_Hash_state_s,
        last: *mut u8,
        total_len: u64,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_finish(s: *mut EverCrypt_Hash_state_s, dst: *mut u8);
}
extern "C" {
    pub fn EverCrypt_Hash_free(s: *mut EverCrypt_Hash_state_s);
}
extern "C" {
    pub fn EverCrypt_Hash_copy(
        s_src: *mut EverCrypt_Hash_state_s,
        s_dst: *mut EverCrypt_Hash_state_s,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_hash_256(input: *mut u8, input_len: u32, dst: *mut u8);
}
extern "C" {
    pub fn EverCrypt_Hash_hash_224(input: *mut u8, input_len: u32, dst: *mut u8);
}
extern "C" {
    pub fn EverCrypt_Hash_hash(
        a: Spec_Hash_Definitions_hash_alg,
        dst: *mut u8,
        input: *mut u8,
        len: u32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s_____s {
    _unused: [u8; 0],
}
pub type Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____ =
    Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s_____s;
extern "C" {
    pub fn EverCrypt_Hash_Incremental_create_in(
        a: Spec_Hash_Definitions_hash_alg,
    ) -> *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____;
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_init(
        s: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_update(
        p: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
        data: *mut u8,
        len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_finish_md5(
        p: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_finish_sha1(
        p: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_finish_sha224(
        p: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_finish_sha256(
        p: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_finish_sha384(
        p: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_finish_sha512(
        p: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_alg_of_state(
        s: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
    ) -> Spec_Hash_Definitions_hash_alg;
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_finish(
        s: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
        dst: *mut u8,
    );
}
extern "C" {
    pub fn EverCrypt_Hash_Incremental_free(
        s: *mut Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____,
    );
}
extern "C" {
    pub fn EverCrypt_HMAC_compute_sha1(
        dst: *mut u8,
        key: *mut u8,
        key_len: u32,
        data: *mut u8,
        data_len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HMAC_compute_sha2_256(
        dst: *mut u8,
        key: *mut u8,
        key_len: u32,
        data: *mut u8,
        data_len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HMAC_compute_sha2_384(
        dst: *mut u8,
        key: *mut u8,
        key_len: u32,
        data: *mut u8,
        data_len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HMAC_compute_sha2_512(
        dst: *mut u8,
        key: *mut u8,
        key_len: u32,
        data: *mut u8,
        data_len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HMAC_is_supported_alg(uu___0_6237: Spec_Hash_Definitions_hash_alg) -> bool;
}
pub type EverCrypt_HMAC_supported_alg = Spec_Hash_Definitions_hash_alg;
extern "C" {
    pub fn EverCrypt_HMAC_compute(
        a: Spec_Hash_Definitions_hash_alg,
        mac: *mut u8,
        key: *mut u8,
        keylen: u32,
        data: *mut u8,
        datalen: u32,
    );
}
pub type EverCrypt_DRBG_supported_alg = Spec_Hash_Definitions_hash_alg;
extern "C" {
    pub static mut EverCrypt_DRBG_reseed_interval: u32;
}
extern "C" {
    pub static mut EverCrypt_DRBG_max_output_length: u32;
}
extern "C" {
    pub static mut EverCrypt_DRBG_max_length: u32;
}
extern "C" {
    pub static mut EverCrypt_DRBG_max_personalization_string_length: u32;
}
extern "C" {
    pub static mut EverCrypt_DRBG_max_additional_input_length: u32;
}
extern "C" {
    pub fn EverCrypt_DRBG_min_length(a: Spec_Hash_Definitions_hash_alg) -> u32;
}
pub type EverCrypt_DRBG_state_s_tags = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EverCrypt_DRBG_state_s_s {
    _unused: [u8; 0],
}
pub type EverCrypt_DRBG_state_s = EverCrypt_DRBG_state_s_s;
extern "C" {
    pub fn EverCrypt_DRBG_create(a: Spec_Hash_Definitions_hash_alg) -> *mut EverCrypt_DRBG_state_s;
}
extern "C" {
    pub fn EverCrypt_DRBG_instantiate_sha1(
        st: *mut EverCrypt_DRBG_state_s,
        personalization_string: *mut u8,
        personalization_string_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_instantiate_sha2_256(
        st: *mut EverCrypt_DRBG_state_s,
        personalization_string: *mut u8,
        personalization_string_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_instantiate_sha2_384(
        st: *mut EverCrypt_DRBG_state_s,
        personalization_string: *mut u8,
        personalization_string_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_instantiate_sha2_512(
        st: *mut EverCrypt_DRBG_state_s,
        personalization_string: *mut u8,
        personalization_string_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_reseed_sha1(
        st: *mut EverCrypt_DRBG_state_s,
        additional_input: *mut u8,
        additional_input_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_reseed_sha2_256(
        st: *mut EverCrypt_DRBG_state_s,
        additional_input: *mut u8,
        additional_input_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_reseed_sha2_384(
        st: *mut EverCrypt_DRBG_state_s,
        additional_input: *mut u8,
        additional_input_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_reseed_sha2_512(
        st: *mut EverCrypt_DRBG_state_s,
        additional_input: *mut u8,
        additional_input_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_generate_sha1(
        output: *mut u8,
        st: *mut EverCrypt_DRBG_state_s,
        n: u32,
        additional_input: *mut u8,
        additional_input_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_generate_sha2_256(
        output: *mut u8,
        st: *mut EverCrypt_DRBG_state_s,
        n: u32,
        additional_input: *mut u8,
        additional_input_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_generate_sha2_384(
        output: *mut u8,
        st: *mut EverCrypt_DRBG_state_s,
        n: u32,
        additional_input: *mut u8,
        additional_input_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_generate_sha2_512(
        output: *mut u8,
        st: *mut EverCrypt_DRBG_state_s,
        n: u32,
        additional_input: *mut u8,
        additional_input_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_uninstantiate_sha1(st: *mut EverCrypt_DRBG_state_s);
}
extern "C" {
    pub fn EverCrypt_DRBG_uninstantiate_sha2_256(st: *mut EverCrypt_DRBG_state_s);
}
extern "C" {
    pub fn EverCrypt_DRBG_uninstantiate_sha2_384(st: *mut EverCrypt_DRBG_state_s);
}
extern "C" {
    pub fn EverCrypt_DRBG_uninstantiate_sha2_512(st: *mut EverCrypt_DRBG_state_s);
}
extern "C" {
    pub fn EverCrypt_DRBG_instantiate(
        st: *mut EverCrypt_DRBG_state_s,
        personalization_string: *mut u8,
        personalization_string_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_reseed(
        st: *mut EverCrypt_DRBG_state_s,
        additional_input: *mut u8,
        additional_input_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_generate(
        output: *mut u8,
        st: *mut EverCrypt_DRBG_state_s,
        n: u32,
        additional_input: *mut u8,
        additional_input_len: u32,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_DRBG_uninstantiate(st: *mut EverCrypt_DRBG_state_s);
}
extern "C" {
    pub fn EverCrypt_Ed25519_sign(signature: *mut u8, secret: *mut u8, len: u32, msg: *mut u8);
}
extern "C" {
    pub fn EverCrypt_Ed25519_verify(
        output: *mut u8,
        len: u32,
        msg: *mut u8,
        signature: *mut u8,
    ) -> bool;
}
extern "C" {
    pub fn EverCrypt_Ed25519_secret_to_public(output: *mut u8, secret: *mut u8);
}
extern "C" {
    pub fn EverCrypt_Ed25519_expand_keys(ks: *mut u8, secret: *mut u8);
}
extern "C" {
    pub fn EverCrypt_Ed25519_sign_expanded(signature: *mut u8, ks: *mut u8, len: u32, msg: *mut u8);
}
pub type EverCrypt_Helpers_uint8_t = u8;
pub type EverCrypt_Helpers_uint16_t = u16;
pub type EverCrypt_Helpers_uint32_t = u32;
pub type EverCrypt_Helpers_uint64_t = u64;
pub type EverCrypt_Helpers_uint8_p = *mut u8;
pub type EverCrypt_Helpers_uint16_p = *mut u16;
pub type EverCrypt_Helpers_uint32_p = *mut u32;
pub type EverCrypt_Helpers_uint64_p = *mut u64;
extern "C" {
    pub fn EverCrypt_HKDF_expand_sha1(
        okm: *mut u8,
        prk: *mut u8,
        prklen: u32,
        info: *mut u8,
        infolen: u32,
        len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_extract_sha1(
        prk: *mut u8,
        salt: *mut u8,
        saltlen: u32,
        ikm: *mut u8,
        ikmlen: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_expand_sha2_256(
        okm: *mut u8,
        prk: *mut u8,
        prklen: u32,
        info: *mut u8,
        infolen: u32,
        len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_extract_sha2_256(
        prk: *mut u8,
        salt: *mut u8,
        saltlen: u32,
        ikm: *mut u8,
        ikmlen: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_expand_sha2_384(
        okm: *mut u8,
        prk: *mut u8,
        prklen: u32,
        info: *mut u8,
        infolen: u32,
        len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_extract_sha2_384(
        prk: *mut u8,
        salt: *mut u8,
        saltlen: u32,
        ikm: *mut u8,
        ikmlen: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_expand_sha2_512(
        okm: *mut u8,
        prk: *mut u8,
        prklen: u32,
        info: *mut u8,
        infolen: u32,
        len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_extract_sha2_512(
        prk: *mut u8,
        salt: *mut u8,
        saltlen: u32,
        ikm: *mut u8,
        ikmlen: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_expand(
        a: Spec_Hash_Definitions_hash_alg,
        okm: *mut u8,
        prk: *mut u8,
        prklen: u32,
        info: *mut u8,
        infolen: u32,
        len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_extract(
        a: Spec_Hash_Definitions_hash_alg,
        prk: *mut u8,
        salt: *mut u8,
        saltlen: u32,
        ikm: *mut u8,
        ikmlen: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_hkdf_expand(
        a: Spec_Hash_Definitions_hash_alg,
        okm: *mut u8,
        prk: *mut u8,
        prklen: u32,
        info: *mut u8,
        infolen: u32,
        len: u32,
    );
}
extern "C" {
    pub fn EverCrypt_HKDF_hkdf_extract(
        a: Spec_Hash_Definitions_hash_alg,
        prk: *mut u8,
        salt: *mut u8,
        saltlen: u32,
        ikm: *mut u8,
        ikmlen: u32,
    );
}
extern "C" {
    pub fn EverCrypt_Poly1305_poly1305(dst: *mut u8, src: *mut u8, len: u32, key: *mut u8);
}
extern "C" {
    pub static mut EverCrypt_StaticConfig_hacl: bool;
}
extern "C" {
    pub static mut EverCrypt_StaticConfig_vale: bool;
}
extern "C" {
    pub static mut EverCrypt_StaticConfig_openssl: bool;
}
extern "C" {
    pub static mut EverCrypt_StaticConfig_bcrypt: bool;
}
extern "C" {
    pub fn Hacl_Blake2b_32_blake2b(
        nn: u32,
        output: *mut u8,
        ll: u32,
        d: *mut u8,
        kk: u32,
        k: *mut u8,
    );
}
extern "C" {
    pub fn Hacl_Blake2b_256_blake2b(
        nn: u32,
        output: *mut u8,
        ll: u32,
        d: *mut u8,
        kk: u32,
        k: *mut u8,
    );
}
extern "C" {
    pub fn Hacl_Blake2s_128_blake2s(
        nn: u32,
        output: *mut u8,
        ll: u32,
        d: *mut u8,
        kk: u32,
        k: *mut u8,
    );
}
extern "C" {
    pub fn Hacl_Blake2s_32_blake2s(
        nn: u32,
        output: *mut u8,
        ll: u32,
        d: *mut u8,
        kk: u32,
        k: *mut u8,
    );
}
